{
  "address": "0x5bF162725B7D6F5c44F32024C099af7703bD71C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_want",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_chef",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_unirouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beefyFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_outputToNativeRoute",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_outputToWantRoute",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "harvester",
          "type": "address"
        }
      ],
      "name": "StratHarvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_CALL_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGIST_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWAL_FEE_CAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWAL_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfWant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beefyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beefyFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beforeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chef",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "native",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "output",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "outputToNativeRoute",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "outputToWantRoute",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "panic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retireStrat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beefyFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setBeefyFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setCallFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "setKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        }
      ],
      "name": "setStrategist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_unirouter",
          "type": "address"
        }
      ],
      "name": "setUnirouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unirouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f809da05d664a1405be5596a8f60670436f4c6197d81c5443bcea88115e13cf",
  "receipt": {
    "to": null,
    "from": "0x0E65483DB212e166F5D7acE18e4B2413644e0164",
    "contractAddress": "0x5bF162725B7D6F5c44F32024C099af7703bD71C9",
    "transactionIndex": 217,
    "gasUsed": "2369360",
    "logsBloom": "0x
    "blockHash": "0x6335a372c7c4c321ab9adcaef86567d8378199f17c6f93b4383e32c95722f2f7",
    "transactionHash": "0x4f809da05d664a1405be5596a8f60670436f4c6197d81c5443bcea88115e13cf",
    "logs": [
      {
        "transactionIndex": 217,
        "blockNumber": 8277832,
        "transactionHash": "0x4f809da05d664a1405be5596a8f60670436f4c6197d81c5443bcea88115e13cf",
        "address": "0x5bF162725B7D6F5c44F32024C099af7703bD71C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000e65483db212e166f5d7ace18e4b2413644e0164"
        ],
        "data": "0x",
        "logIndex": 799,
        "blockHash": "0x6335a372c7c4c321ab9adcaef86567d8378199f17c6f93b4383e32c95722f2f7"
      },
      {
        "transactionIndex": 217,
        "blockNumber": 8277832,
        "transactionHash": "0x4f809da05d664a1405be5596a8f60670436f4c6197d81c5443bcea88115e13cf",
        "address": "0x9001eE054F1692feF3A48330cB543b6FEc6287eb",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000005bf162725b7d6f5c44f32024c099af7703bd71c9",
          "0x000000000000000000000000c5a992dd7ba108e3349d2fd8e8e126753ca8ce34"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 800,
        "blockHash": "0x6335a372c7c4c321ab9adcaef86567d8378199f17c6f93b4383e32c95722f2f7"
      },
      {
        "transactionIndex": 217,
        "blockNumber": 8277832,
        "transactionHash": "0x4f809da05d664a1405be5596a8f60670436f4c6197d81c5443bcea88115e13cf",
        "address": "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000005bf162725b7d6f5c44f32024c099af7703bd71c9",
          "0x00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 801,
        "blockHash": "0x6335a372c7c4c321ab9adcaef86567d8378199f17c6f93b4383e32c95722f2f7"
      }
    ],
    "blockNumber": 8277832,
    "cumulativeGasUsed": "32357623",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9001eE054F1692feF3A48330cB543b6FEc6287eb",
    0,
    "0xC5a992dD7ba108e3349D2Fd8e8E126753Ca8Ce34",
    "0xF08d300728F91a78ad6bd4547Be3C1945484ADA5",
    "0x10ED43C718714eb63d5aA57B78B54704E256024E",
    "0x10aee6B5594942433e7Fc2783598c979B030eF3D",
    "0x530115e78F7BC2fE235666651f9113DB9cecE5A2",
    "0xEB41298BA4Ea3865c33bDE8f60eC414421050d53",
    [
      "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",
      "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"
    ],
    [
      "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",
      "0x9001eE054F1692feF3A48330cB543b6FEc6287eb"
    ]
  ],
  "solcInputHash": "cfb92417a49fab01630bcfc08ed4b59b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_chef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unirouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beefyFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_outputToNativeRoute\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_outputToWantRoute\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"}],\"name\":\"StratHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CALL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGIST_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_FEE_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beefyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beefyFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"native\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"output\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outputToNativeRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outputToWantRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retireStrat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beefyFeeRecipient\",\"type\":\"address\"}],\"name\":\"setBeefyFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setCallFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unirouter\",\"type\":\"address\"}],\"name\":\"setUnirouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"beforeDeposit()\":{\"details\":\"Function to synchronize balances before new user deposit. Can be overridden in the strategy.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBeefyFeeRecipient(address)\":{\"details\":\"Updates beefy fee recipient.\",\"params\":{\"_beefyFeeRecipient\":\"new beefy fee recipient address.\"}},\"setKeeper(address)\":{\"details\":\"Updates address of the strat keeper.\",\"params\":{\"_keeper\":\"new keeper address.\"}},\"setStrategist(address)\":{\"details\":\"Updates address where strategist fee earnings will go.\",\"params\":{\"_strategist\":\"new strategist address.\"}},\"setUnirouter(address)\":{\"details\":\"Updates router that will be used for swaps.\",\"params\":{\"_unirouter\":\"new unirouter address.\"}},\"setVault(address)\":{\"details\":\"Updates parent vault.\",\"params\":{\"_vault\":\"new vault address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol\":\"StrategyCommonChefSingle\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xarrscLMcCTUtTOntnfDIulLculVcul jjTpeulxarulrulxarrcLgvfCTUcarrLsTFOtfDncarrIulc]jmuljuljul VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/BIFI/interfaces/common/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMasterChef {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\",\"keccak256\":\"0x8b36cf73ef680e7be899633ed9199d118d40aeb22aac9936bb241af128ef743a\",\"license\":\"MIT\"},\"contracts/BIFI/interfaces/common/IUniswapRouterETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapRouterETH {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x8ee5a4f0c1d1a5603d829c855cf72a27b3b99a54b41c5e1e9ee659677e10f606\",\"license\":\"MIT\"},\"contracts/BIFI/interfaces/common/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n}\",\"keccak256\":\"0xbe96db00c9f001105c47fa1cc7ec1be4637a0ad640d0978179a9d1d7bbaa370f\",\"license\":\"MIT\"},\"contracts/BIFI/strategies/Common/FeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StratManager.sol\\\";\\n\\nabstract contract FeeManager is StratManager {\\n    uint constant public STRATEGIST_FEE = 112;\\n    uint constant public MAX_FEE = 1000;\\n    uint constant public MAX_CALL_FEE = 111;\\n\\n    uint constant public WITHDRAWAL_FEE_CAP = 50;\\n    uint constant public WITHDRAWAL_MAX = 10000;\\n\\n    uint public withdrawalFee = 10;\\n\\n    uint public callFee = 111;\\n    uint public beefyFee = MAX_FEE - STRATEGIST_FEE - callFee;\\n\\n    function setCallFee(uint256 _fee) external onlyManager {\\n        require(_fee <= MAX_CALL_FEE, \\\"!cap\\\");\\n\\n        callFee = _fee;\\n        beefyFee = MAX_FEE - STRATEGIST_FEE - callFee;\\n    }\\n\\n    function setWithdrawalFee(uint256 _fee) external onlyManager {\\n        require(_fee <= WITHDRAWAL_FEE_CAP, \\\"!cap\\\");\\n\\n        withdrawalFee = _fee;\\n    }\\n}\",\"keccak256\":\"0xa2adf12de4080efe7b517be6c76cdaaa9ddf923dec034e2da2f9ffdc943f83de\",\"license\":\"MIT\"},\"contracts/BIFI/strategies/Common/StratManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ncontract StratManager is Ownable, Pausable {\\n    /**\\n     * @dev Beefy Contracts:\\n     * {keeper} - Address to manage a few lower risk features of the strat\\n     * {strategist} - Address of the strategy author/deployer where strategist fee will go.\\n     * {vault} - Address of the vault that controls the strategy's funds.\\n     * {unirouter} - Address of exchange to execute swaps.\\n     */\\n    address public keeper;\\n    address public strategist;\\n    address public unirouter;\\n    address public vault;\\n    address public beefyFeeRecipient;\\n\\n    /**\\n     * @dev Initializes the base strategy.\\n     * @param _keeper address to use as alternative owner.\\n     * @param _strategist address where strategist fees go.\\n     * @param _unirouter router to use for swaps\\n     * @param _vault address of parent vault.\\n     * @param _beefyFeeRecipient address where to send Beefy's fees.\\n     */\\n    constructor(\\n        address _keeper,\\n        address _strategist,\\n        address _unirouter,\\n        address _vault,\\n        address _beefyFeeRecipient\\n    ) {\\n        keeper = _keeper;\\n        strategist = _strategist;\\n        unirouter = _unirouter;\\n        vault = _vault;\\n        beefyFeeRecipient = _beefyFeeRecipient;\\n    }\\n\\n    // checks that caller is either owner or keeper.\\n    modifier onlyManager() {\\n        require(msg.sender == owner() || msg.sender == keeper, \\\"!manager\\\");\\n        _;\\n    }\\n\\n    // verifies that the caller is not a contract.\\n    modifier onlyEOA() {\\n        require(msg.sender == tx.origin, \\\"!EOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Updates address of the strat keeper.\\n     * @param _keeper new keeper address.\\n     */\\n    function setKeeper(address _keeper) external onlyManager {\\n        keeper = _keeper;\\n    }\\n\\n    /**\\n     * @dev Updates address where strategist fee earnings will go.\\n     * @param _strategist new strategist address.\\n     */\\n    function setStrategist(address _strategist) external {\\n        require(msg.sender == strategist, \\\"!strategist\\\");\\n        strategist = _strategist;\\n    }\\n\\n    /**\\n     * @dev Updates router that will be used for swaps.\\n     * @param _unirouter new unirouter address.\\n     */\\n    function setUnirouter(address _unirouter) external onlyOwner {\\n        unirouter = _unirouter;\\n    }\\n\\n    /**\\n     * @dev Updates parent vault.\\n     * @param _vault new vault address.\\n     */\\n    function setVault(address _vault) external onlyOwner {\\n        vault = _vault;\\n    }\\n\\n    /**\\n     * @dev Updates beefy fee recipient.\\n     * @param _beefyFeeRecipient new beefy fee recipient address.\\n     */\\n    function setBeefyFeeRecipient(address _beefyFeeRecipient) external onlyOwner {\\n        beefyFeeRecipient = _beefyFeeRecipient;\\n    }\\n\\n    /**\\n     * @dev Function to synchronize balances before new user deposit.\\n     * Can be overridden in the strategy.\\n     */\\n    function beforeDeposit() external virtual {}\\n}\",\"keccak256\":\"0x8ec0b944ea998987eb60041d1d2f43ce140d2d5a4b23548b7b24f101209d88ed\",\"license\":\"MIT\"},\"contracts/BIFI/strategies/Common/StrategyCommonChefBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../../interfaces/common/IUniswapRouterETH.sol\\\";\\nimport \\\"../../interfaces/common/IUniswapV2Pair.sol\\\";\\nimport \\\"../../interfaces/common/IMasterChef.sol\\\";\\nimport \\\"../Common/StratManager.sol\\\";\\nimport \\\"../Common/FeeManager.sol\\\";\\n\\nabstract contract StrategyCommonChefBase is StratManager, FeeManager {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    // Tokens used\\n    address public native;\\n    address public output;\\n    address public want;\\n\\n    // Third party contracts\\n    address public chef;\\n    uint256 public poolId;\\n\\n    // Routes\\n    address[] public outputToNativeRoute;\\n\\n    /**\\n     * @dev Event that is fired each time someone harvests the strat.\\n     */\\n    event StratHarvest(address indexed harvester);\\n\\n    constructor(\\n        address _want,\\n        uint256 _poolId,\\n        address _chef,\\n        address _vault,\\n        address _unirouter,\\n        address _keeper,\\n        address _strategist,\\n        address _beefyFeeRecipient,\\n        address[] memory _outputToNativeRoute\\n    ) StratManager(_keeper, _strategist, _unirouter, _vault, _beefyFeeRecipient) {\\n        want = _want;\\n        poolId = _poolId;\\n        chef = _chef;\\n\\n        output = _outputToNativeRoute[0];\\n        native = _outputToNativeRoute[_outputToNativeRoute.length - 1];\\n        outputToNativeRoute = _outputToNativeRoute;\\n\\n        _giveAllowances();\\n    }\\n\\n    // puts the funds to work\\n    function deposit() public whenNotPaused {\\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\\n\\n        if (wantBal > 0) {\\n            IMasterChef(chef).deposit(poolId, wantBal);\\n        }\\n    }\\n\\n    function withdraw(uint256 _amount) external {\\n        require(msg.sender == vault, \\\"!vault\\\");\\n\\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\\n\\n        if (wantBal < _amount) {\\n            IMasterChef(chef).withdraw(poolId, _amount.sub(wantBal));\\n            wantBal = IERC20(want).balanceOf(address(this));\\n        }\\n\\n        if (wantBal > _amount) {\\n            wantBal = _amount;\\n        }\\n\\n        if (tx.origin == owner() || paused()) {\\n            IERC20(want).safeTransfer(vault, wantBal);\\n        } else {\\n            uint256 withdrawalFeeAmount = wantBal.mul(withdrawalFee).div(WITHDRAWAL_MAX);\\n            IERC20(want).safeTransfer(vault, wantBal.sub(withdrawalFeeAmount));\\n        }\\n    }\\n\\n    // compounds earnings and charges performance fee\\n    function harvest() external whenNotPaused onlyEOA {\\n        IMasterChef(chef).deposit(poolId, 0);\\n        chargeFees();\\n        swapRewardForWant();\\n        deposit();\\n\\n        emit StratHarvest(msg.sender);\\n    }\\n\\n    // performance fees\\n    function chargeFees() internal {\\n        uint256 toNative = IERC20(output).balanceOf(address(this)).mul(45).div(1000);\\n        IUniswapRouterETH(unirouter).swapExactTokensForTokens(toNative, 0, outputToNativeRoute, address(this), block.timestamp);\\n\\n        uint256 nativeBal = IERC20(native).balanceOf(address(this));\\n\\n        uint256 callFeeAmount = nativeBal.mul(callFee).div(MAX_FEE);\\n        IERC20(native).safeTransfer(msg.sender, callFeeAmount);\\n\\n        uint256 beefyFeeAmount = nativeBal.mul(beefyFee).div(MAX_FEE);\\n        IERC20(native).safeTransfer(beefyFeeRecipient, beefyFeeAmount);\\n\\n        uint256 strategistFee = nativeBal.mul(STRATEGIST_FEE).div(MAX_FEE);\\n        IERC20(native).safeTransfer(strategist, strategistFee);\\n    }\\n\\n    // Swap output for more want tokens.\\n    function swapRewardForWant() internal virtual;\\n\\n    // calculate the total underlaying 'want' held by the strat.\\n    function balanceOf() public view returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    // it calculates how much 'want' this contract holds.\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    // it calculates how much 'want' the strategy has working in the farm.\\n    function balanceOfPool() public view returns (uint256) {\\n        (uint256 _amount, ) = IMasterChef(chef).userInfo(poolId, address(this));\\n        return _amount;\\n    }\\n\\n    // called as part of strat migration. Sends all the available funds back to the vault.\\n    function retireStrat() external {\\n        require(msg.sender == vault, \\\"!vault\\\");\\n\\n        IMasterChef(chef).emergencyWithdraw(poolId);\\n\\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\\n        IERC20(want).transfer(vault, wantBal);\\n    }\\n\\n    // pauses deposits and withdraws all funds from third party systems.\\n    function panic() public onlyManager {\\n        pause();\\n        IMasterChef(chef).emergencyWithdraw(poolId);\\n    }\\n\\n    function pause() public onlyManager {\\n        _pause();\\n\\n        _removeAllowances();\\n    }\\n\\n    function unpause() external onlyManager {\\n        _unpause();\\n\\n        _giveAllowances();\\n\\n        deposit();\\n    }\\n\\n    function _giveAllowances() private {\\n        IERC20(want).safeApprove(chef, type(uint256).max);\\n        IERC20(output).safeApprove(unirouter, type(uint256).max);\\n    }\\n\\n    function giveAllowances() internal virtual {\\n        _giveAllowances();\\n    }\\n\\n    function _removeAllowances() private {\\n        IERC20(want).safeApprove(chef, 0);\\n        IERC20(output).safeApprove(unirouter, 0);\\n    }\\n\\n    function removeAllowances() internal virtual {\\n        _removeAllowances();\\n    }\\n}\\n\",\"keccak256\":\"0x6183dca4b62272d56889a4b2847d243f14889b554d50af729b6aef6bdccd281c\",\"license\":\"GPL-3.0\"},\"contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../../interfaces/common/IUniswapRouterETH.sol\\\";\\nimport \\\"../../interfaces/common/IUniswapV2Pair.sol\\\";\\nimport \\\"../../interfaces/common/IMasterChef.sol\\\";\\nimport \\\"../Common/StratManager.sol\\\";\\nimport \\\"../Common/FeeManager.sol\\\";\\n\\nimport \\\"./StrategyCommonChefBase.sol\\\";\\n\\ncontract StrategyCommonChefSingle is StrategyCommonChefBase {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    // Routes\\n    address[] public outputToWantRoute;\\n\\n    constructor(\\n        address _want,\\n        uint256 _poolId,\\n        address _chef,\\n        address _vault,\\n        address _unirouter,\\n        address _keeper,\\n        address _strategist,\\n        address _beefyFeeRecipient,\\n        address[] memory _outputToNativeRoute,\\n        address[] memory _outputToWantRoute\\n    ) StrategyCommonChefBase(\\n        _want,\\n        _poolId,\\n        _chef,\\n        _vault,\\n        _unirouter,\\n        _keeper,\\n        _strategist,\\n        _beefyFeeRecipient,\\n        _outputToNativeRoute\\n    ) {\\n        outputToWantRoute = _outputToWantRoute;\\n    }\\n\\n    // Adds liquidity to AMM and gets more LP tokens.\\n    function swapRewardForWant() internal override {\\n        uint256 rewardBal = IERC20(output).balanceOf(address(this));\\n        IUniswapRouterETH(unirouter).swapExactTokensForTokens(rewardBal, 0, outputToWantRoute, address(this), block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xe085c714c9ae4d3dd16597b2c785ea3e3aa518e38f2cc3fc6d762cef150dcbcc\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052600a600655606f60078190556200001f60706103e862000a1c565b6200002b919062000a1c565b6008553480156200003b57600080fd5b5060405162002bc338038062002bc38339810160408190526200005e916200068c565b8989898989898989898383868885600033600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b19168155600180546001600160a01b03199081166001600160a01b0398891617909155600280548216968816969096179095556003805486169487169490941790935560048054851692861692909217909155600580548416918516919091179055600b805483168d8516179055600d8b9055600c8054909216928a16929092179055815182919062000159576200015962000aae565b6020026020010151600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001825162000198919062000a1c565b81518110620001ab57620001ab62000aae565b602090810291909101810151600980546001600160a01b0319166001600160a01b039092169190911790558151620001ea91600e919084019062000554565b50620001f562000226565b50508751620002159750600f965060208901955093506200055492505050565b505050505050505050505062000b02565b600c54600b5462000253916001600160a01b03918216911660001962000282602090811b6200112917901c565b600354600a5462000280916001600160a01b03918216911660001962000282602090811b6200112917901c565b565b801580620003115750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90620002bb903090869060040162000910565b60206040518083038186803b158015620002d457600080fd5b505afa158015620002e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200030f9190620007b3565b155b620003395760405162461bcd60e51b81526004016200033090620009d3565b60405180910390fd5b620003948363095ea7b360e01b84846040516024016200035b92919062000935565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b03938416179052906200039916565b505050565b6000620003f5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200043560201b62001223179092919060201c565b80519091501562000394578080602001905181019062000416919062000791565b620003945760405162461bcd60e51b81526004016200033090620009bf565b606062000446848460008562000450565b90505b9392505050565b606082471015620004755760405162461bcd60e51b8152600401620003309062000967565b843b620004965760405162461bcd60e51b8152600401620003309062000981565b600080866001600160a01b03168587604051620004b4919062000902565b60006040518083038185875af1925050503d8060008114620004f3576040519150601f19603f3d011682016040523d82523d6000602084013e620004f8565b606091505b5090925090506200050b82828662000516565b979650505050505050565b606083156200052757508162000449565b825115620005385782518084602001fd5b8160405162461bcd60e51b815260040162000330919062000952565b828054828255906000526020600020908101928215620005ac579160200282015b82811115620005ac57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000575565b50620005ba929150620005be565b5090565b5b80821115620005ba5760008155600101620005bf565b6000620005ec620005e684620009f6565b620009e7565b9050808382526020808301915083868660051b86011115620006115762000611600080fd5b60005b868110156200063b57620006288262000646565b8452928201929082019060010162000614565b505050509392505050565b8051620006538162000ada565b919050565b600082601f8301126200066e576200066e600080fd5b6200044983835160208501620005d5565b8051620006538162000af3565b6000806000806000806000806000806101408b8d031215620006b157620006b1600080fd5b620006bc8b62000646565b995060208b01519850620006d360408c0162000646565b9750620006e360608c0162000646565b9650620006f360808c0162000646565b95506200070360a08c0162000646565b94506200071360c08c0162000646565b93506200072360e08c0162000646565b6101008c01519093506001600160401b0380821115620007465762000746600080fd5b620007548e838f0162000658565b93506101208d0151915080821115620007705762000770600080fd5b506200077f8d828e0162000658565b9150509295989b9194979a5092959850565b600060208284031215620007a857620007a8600080fd5b62000449826200067f565b600060208284031215620007ca57620007ca600080fd5b5051919050565b60008151620007e581856020860162000a36565b9290920192915050565b8051808352600090602084016200080b82826020870162000a36565b601f91909101601f1916019392505050565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b60208201525b60400192915050565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201526200085a565b603681526000602082017f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060208201526200085a565b6000620004498284620007d1565b6001600160a01b0383168152604081016001600160a01b038316602083015262000449565b6001600160a01b0383168152604081016200044960208301849052565b602081526000620004496020830184620007ef565b6020815260006200097b602083016200081d565b92915050565b6020815260006200097b60208301601d81527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000602082015260400190565b6020815260006200097b6020830162000863565b6020815260006200097b60208301620008a9565b60405162000653828262000a69565b60006001600160401b0382111562000a125762000a1262000ac4565b5060051b60200190565b60008282101562000a315762000a3162000a98565b500390565b60005b8381101562000a5357818101518382015260200162000a39565b8381111562000a63576000848401525b50505050565b601f8201601f191681016001600160401b038111828210171562000a915762000a9162000ac4565b6040525050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000af057600080fd5b50565b801515811462000af057600080fd5b6120b18062000b126000396000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c80638456cb5911610146578063c1a3d44c116100c3578063dd93d6b311610087578063dd93d6b314610471578063dfbdc43714610484578063f20eaeb81461048c578063f2fde38b1461049f578063fb617787146104b2578063fbfa77cf146104ba57600080fd5b8063c1a3d44c14610432578063c7b9d5301461043a578063d0e30db01461044d578063d310258914610455578063d92f3d731461045e57600080fd5b8063a68833e51161010a578063a68833e5146103dd578063ac1e5025146103f0578063aced166114610403578063bc063e1a14610416578063be12a9781461041f57600080fd5b80638456cb591461039f5780638bc7e8c4146103a75780638da5cb5b146103b05780638e145459146103c157806390321e1a146103d457600080fd5b80633f4ba83a116101df5780635c975abb116101a35780635c975abb146103475780636817031b14610361578063715018a614610374578063722713f71461037c578063748747e6146103845780637d38ca651461039757600080fd5b80633f4ba83a146103265780634641257d1461032e5780634700d3051461033657806354518b1a1461033e578063573fef0a1461030057600080fd5b8063257ae0de11610226578063257ae0de146102da57806326465826146102ed5780632ad5a53f146103025780632e1a7d4d1461030a5780633e0dc34e1461031d57600080fd5b8063115880861461026357806311b0b42d146102815780631f1fcd51146102a15780631fc8bc5d146102b45780631fe4a686146102c7575b600080fd5b61026b6104cd565b6040516102789190611eba565b60405180910390f35b600954610294906001600160a01b031681565b6040516102789190611d58565b600b54610294906001600160a01b031681565b600c54610294906001600160a01b031681565b600254610294906001600160a01b031681565b600354610294906001600160a01b031681565b6103006102fb3660046119e5565b61055b565b005b61026b606f81565b6103006103183660046119e5565b6105e7565b61026b600d5481565b61030061083b565b610300610894565b610300610988565b61026b61271081565b600054600160a01b900460ff166040516102789190611daf565b61030061036f366004611966565b610a34565b610300610a80565b61026b610af4565b610300610392366004611966565b610b14565b61026b607081565b610300610b75565b61026b60065481565b6000546001600160a01b0316610294565b600554610294906001600160a01b031681565b61026b60075481565b6103006103eb366004611966565b610bc4565b6103006103fe3660046119e5565b610c10565b600154610294906001600160a01b031681565b61026b6103e881565b61029461042d3660046119e5565b610c75565b61026b610c9f565b610300610448366004611966565b610d20565b610300610d6c565b61026b60085481565b61030061046c366004611966565b610e88565b61029461047f3660046119e5565b610ed4565b61026b603281565b600a54610294906001600160a01b031681565b6103006104ad366004611966565b610ee4565b610300610f8f565b600454610294906001600160a01b031681565b600c54600d546040516393f1a40b60e01b815260009283926001600160a01b03909116916393f1a40b91610505913090600401611ec6565b604080518083038186803b15801561051c57600080fd5b505afa158015610530573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105549190611a1d565b5092915050565b6000546001600160a01b031633148061057e57506001546001600160a01b031633145b6105a35760405162461bcd60e51b815260040161059a90611e72565b60405180910390fd5b606f8111156105c45760405162461bcd60e51b815260040161059a90611e2a565b6007819055806105d760706103e8611fa6565b6105e19190611fa6565b60085550565b6004546001600160a01b031633146106115760405162461bcd60e51b815260040161059a90611e3c565b600b546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610642903090600401611d58565b60206040518083038186803b15801561065a57600080fd5b505afa15801561066e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106929190611a01565b90508181101561079057600c54600d546001600160a01b039091169063441a3e70906106be858561123c565b6040518363ffffffff1660e01b81526004016106db929190611ed2565b600060405180830381600087803b1580156106f557600080fd5b505af1158015610709573d6000803e3d6000fd5b5050600b546040516370a0823160e01b81526001600160a01b0390911692506370a08231915061073d903090600401611d58565b60206040518083038186803b15801561075557600080fd5b505afa158015610769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078d9190611a01565b90505b8181111561079b5750805b6000546001600160a01b03163214806107bd5750600054600160a01b900460ff165b156107e357600454600b546107df916001600160a01b03918216911683611251565b5050565b60006108066127106108006006548561127090919063ffffffff16565b9061127c565b600454909150610836906001600160a01b0316610823848461123c565b600b546001600160a01b03169190611251565b505050565b6000546001600160a01b031633148061085e57506001546001600160a01b031633145b61087a5760405162461bcd60e51b815260040161059a90611e72565b610882611288565b61088a6112f8565b610892610d6c565b565b600054600160a01b900460ff16156108be5760405162461bcd60e51b815260040161059a90611e18565b3332146108dd5760405162461bcd60e51b815260040161059a90611e96565b600c54600d54604051631c57762b60e31b81526001600160a01b039092169163e2bbb1589161091191600090600401611ed2565b600060405180830381600087803b15801561092b57600080fd5b505af115801561093f573d6000803e3d6000fd5b5050505061094b611336565b610953611588565b61095b610d6c565b60405133907f577a37fdb49a88d66684922c6f913df5239b4f214b2b97c53ef8e3bbb2034cb590600090a2565b6000546001600160a01b03163314806109ab57506001546001600160a01b031633145b6109c75760405162461bcd60e51b815260040161059a90611e72565b6109cf610b75565b600c54600d54604051632989754760e11b81526001600160a01b0390921691635312ea8e91610a0091600401611eba565b600060405180830381600087803b158015610a1a57600080fd5b505af1158015610a2e573d6000803e3d6000fd5b50505050565b6000546001600160a01b03163314610a5e5760405162461bcd60e51b815260040161059a90611e4e565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610aaa5760405162461bcd60e51b815260040161059a90611e4e565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000610b0f610b016104cd565b610b09610c9f565b9061169a565b905090565b6000546001600160a01b0316331480610b3757506001546001600160a01b031633145b610b535760405162461bcd60e51b815260040161059a90611e72565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331480610b9857506001546001600160a01b031633145b610bb45760405162461bcd60e51b815260040161059a90611e72565b610bbc6116a6565b61089261170b565b6000546001600160a01b03163314610bee5760405162461bcd60e51b815260040161059a90611e4e565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331480610c3357506001546001600160a01b031633145b610c4f5760405162461bcd60e51b815260040161059a90611e72565b6032811115610c705760405162461bcd60e51b815260040161059a90611e2a565b600655565b600e8181548110610c8557600080fd5b6000918252602090912001546001600160a01b0316905081565b600b546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610cd0903090600401611d58565b60206040518083038186803b158015610ce857600080fd5b505afa158015610cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0f9190611a01565b6002546001600160a01b03163314610d4a5760405162461bcd60e51b815260040161059a90611de2565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600054600160a01b900460ff1615610d965760405162461bcd60e51b815260040161059a90611e18565b600b546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610dc7903090600401611d58565b60206040518083038186803b158015610ddf57600080fd5b505afa158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e179190611a01565b90508015610e8557600c54600d54604051631c57762b60e31b81526001600160a01b039092169163e2bbb15891610e52918590600401611ed2565b600060405180830381600087803b158015610e6c57600080fd5b505af1158015610e80573d6000803e3d6000fd5b505050505b50565b6000546001600160a01b03163314610eb25760405162461bcd60e51b815260040161059a90611e4e565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600f8181548110610c8557600080fd5b6000546001600160a01b03163314610f0e5760405162461bcd60e51b815260040161059a90611e4e565b6001600160a01b038116610f345760405162461bcd60e51b815260040161059a90611df4565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610fb95760405162461bcd60e51b815260040161059a90611e3c565b600c54600d54604051632989754760e11b81526001600160a01b0390921691635312ea8e91610fea91600401611eba565b600060405180830381600087803b15801561100457600080fd5b505af1158015611018573d6000803e3d6000fd5b5050600b546040516370a0823160e01b8152600093506001600160a01b0390911691506370a082319061104f903090600401611d58565b60206040518083038186803b15801561106757600080fd5b505afa15801561107b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109f9190611a01565b600b546004805460405163a9059cbb60e01b81529394506001600160a01b039283169363a9059cbb936110d793921691869101611d92565b602060405180830381600087803b1580156110f157600080fd5b505af1158015611105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107df91906119c7565b8015806111b15750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061115f9030908690600401611d6d565b60206040518083038186803b15801561117757600080fd5b505afa15801561118b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111af9190611a01565b155b6111cd5760405162461bcd60e51b815260040161059a90611ea8565b6108368363095ea7b360e01b84846040516024016111ec929190611d92565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611747565b606061123284846000856117d6565b90505b9392505050565b60006112488284611fa6565b90505b92915050565b6108368363a9059cbb60e01b84846040516024016111ec929190611d92565b60006112488284611f87565b60006112488284611f73565b600054600160a01b900460ff166112b15760405162461bcd60e51b815260040161059a90611dd0565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516112ee9190611d58565b60405180910390a1565b600c54600b54611317916001600160a01b039182169116600019611129565b600354600a54610892916001600160a01b039182169116600019611129565b600a546040516370a0823160e01b81526000916113cc916103e89161080091602d916001600160a01b0316906370a0823190611376903090600401611d58565b60206040518083038186803b15801561138e57600080fd5b505afa1580156113a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c69190611a01565b90611270565b6003546040516338ed173960e01b81529192506001600160a01b0316906338ed173990611407908490600090600e9030904290600401611ede565b600060405180830381600087803b15801561142157600080fd5b505af1158015611435573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261145d9190810190611984565b506009546040516370a0823160e01b81526000916001600160a01b0316906370a082319061148f903090600401611d58565b60206040518083038186803b1580156114a757600080fd5b505afa1580156114bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114df9190611a01565b905060006114fe6103e86108006007548561127090919063ffffffff16565b600954909150611518906001600160a01b03163383611251565b60006115356103e86108006008548661127090919063ffffffff16565b600554600954919250611555916001600160a01b03908116911683611251565b60006115686103e8610800866070611270565b600254600954919250610e80916001600160a01b03908116911683611251565b600a546040516370a0823160e01b81526000916001600160a01b0316906370a08231906115b9903090600401611d58565b60206040518083038186803b1580156115d157600080fd5b505afa1580156115e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116099190611a01565b6003546040516338ed173960e01b81529192506001600160a01b0316906338ed173990611644908490600090600f9030904290600401611ede565b600060405180830381600087803b15801561165e57600080fd5b505af1158015611672573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107df9190810190611984565b60006112488284611f5b565b600054600160a01b900460ff16156116d05760405162461bcd60e51b815260040161059a90611e18565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112e13390565b600c54600b54611729916001600160a01b0391821691166000611129565b600354600a54610892916001600160a01b0391821691166000611129565b600061179c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112239092919063ffffffff16565b80519091501561083657808060200190518101906117ba91906119c7565b6108365760405162461bcd60e51b815260040161059a90611e84565b6060824710156117f85760405162461bcd60e51b815260040161059a90611e06565b843b6118165760405162461bcd60e51b815260040161059a90611e60565b600080866001600160a01b031685876040516118329190611d4c565b60006040518083038185875af1925050503d806000811461186f576040519150601f19603f3d011682016040523d82523d6000602084013e611874565b606091505b509150915061188482828661188f565b979650505050505050565b6060831561189e575081611235565b8251156118ae5782518084602001fd5b8160405162461bcd60e51b815260040161059a9190611dbd565b60006118db6118d684611f37565b611f2a565b9050808382526020808301915083868660051b860111156118fe576118fe600080fd5b60005b8681101561191d57815184529282019290820190600101611901565b505050509392505050565b803561193381612058565b919050565b600082601f83011261194c5761194c600080fd5b611248838351602085016118c8565b80516119338161206d565b60006020828403121561197b5761197b600080fd5b61124882611928565b60006020828403121561199957611999600080fd5b815167ffffffffffffffff8111156119b3576119b3600080fd5b6119bf84828501611938565b949350505050565b6000602082840312156119dc576119dc600080fd5b6112488261195b565b6000602082840312156119fa576119fa600080fd5b5035919050565b600060208284031215611a1657611a16600080fd5b5051919050565b60008060408385031215611a3357611a33600080fd5b505080516020909101519092909150565b805480835260008281526020808220940193909190825b82811015611a9757611a8986611a7884546001600160a01b031690565b6001600160a01b0316815260200190565b955060019182019101611a5b565b5093949350505050565b60008151611ab3818560208601611fbd565b9290920192915050565b805180835260009060208401611ad7828260208701611fbd565b601f91909101601f1916019392505050565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b81525b60200192915050565b600b81526000602082016a085cdd1c985d1959da5cdd60aa1b8152611b0e565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201525b60400192915050565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b6020820152611b74565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b8152611b0e565b60048152600060208201630216361760e41b8152611b0e565b6006815260006020820165085d985d5b1d60d21b8152611b0e565b6000611c268260208082520190565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728152611b0e565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000008152611b0e565b600881526000602082016710b6b0b730b3b2b960c11b8152611b0e565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b6020820152611b74565b600481526000602082016321454f4160e01b8152611b0e565b603681526000602082017f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6020820152611b74565b60006112488284611aa1565b6001600160a01b03821681526020810161124b565b6001600160a01b0383168152604081015b6001600160a01b0383166020830152611235565b6001600160a01b0383168152604081015b61123560208301849052565b81151581526020810161124b565b6020815260006112486020830184611abd565b60208152600061124b60208301611ae9565b60208152600061124b60208301611b17565b60208152600061124b60208301611b37565b60208152600061124b60208301611b7d565b60208152600061124b60208301611bbe565b60208152600061124b60208301611be3565b60208152600061124b60208301611bfc565b60208152600061124b60208301611c17565b60208152600061124b60208301611c4e565b60208152600061124b60208301611c80565b60208152600061124b60208301611c9d565b60208152600061124b60208301611ce2565b60208152600061124b60208301611cfb565b8181526020810161124b565b82815260408101611d7e565b82815260408101611da3565b858152611eed60208201869052565b60a060408201526000611f0360a0830186611a44565b6001600160a01b03851660608401529050611f2060808301849052565b9695505050505050565b6040516119338282611fe9565b600067ffffffffffffffff821115611f5157611f51612042565b5060051b60200190565b60008219821115611f6e57611f6e612016565b500190565b600082611f8257611f8261202c565b500490565b6000816000190483118215151615611fa157611fa1612016565b500290565b600082821015611fb857611fb8612016565b500390565b60005b83811015611fd8578181015183820152602001611fc0565b83811115610a2e5750506000910152565b601f8201601f1916810167ffffffffffffffff8111828210171561200f5761200f612042565b6040525050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e8557600080fd5b8015158114610e8557600080fdfea2646970667358221220111cf9e59ff05b3ce9d830c2c75b80b60194973b782cad3edaad361490782ff464736f6c63430008050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025e5760003560e01c80638456cb5911610146578063c1a3d44c116100c3578063dd93d6b311610087578063dd93d6b314610471578063dfbdc43714610484578063f20eaeb81461048c578063f2fde38b1461049f578063fb617787146104b2578063fbfa77cf146104ba57600080fd5b8063c1a3d44c14610432578063c7b9d5301461043a578063d0e30db01461044d578063d310258914610455578063d92f3d731461045e57600080fd5b8063a68833e51161010a578063a68833e5146103dd578063ac1e5025146103f0578063aced166114610403578063bc063e1a14610416578063be12a9781461041f57600080fd5b80638456cb591461039f5780638bc7e8c4146103a75780638da5cb5b146103b05780638e145459146103c157806390321e1a146103d457600080fd5b80633f4ba83a116101df5780635c975abb116101a35780635c975abb146103475780636817031b14610361578063715018a614610374578063722713f71461037c578063748747e6146103845780637d38ca651461039757600080fd5b80633f4ba83a146103265780634641257d1461032e5780634700d3051461033657806354518b1a1461033e578063573fef0a1461030057600080fd5b8063257ae0de11610226578063257ae0de146102da57806326465826146102ed5780632ad5a53f146103025780632e1a7d4d1461030a5780633e0dc34e1461031d57600080fd5b8063115880861461026357806311b0b42d146102815780631f1fcd51146102a15780631fc8bc5d146102b45780631fe4a686146102c7575b600080fd5b61026b6104cd565b6040516102789190611eba565b60405180910390f35b600954610294906001600160a01b031681565b6040516102789190611d58565b600b54610294906001600160a01b031681565b600c54610294906001600160a01b031681565b600254610294906001600160a01b031681565b600354610294906001600160a01b031681565b6103006102fb3660046119e5565b61055b565b005b61026b606f81565b6103006103183660046119e5565b6105e7565b61026b600d5481565b61030061083b565b610300610894565b610300610988565b61026b61271081565b600054600160a01b900460ff166040516102789190611daf565b61030061036f366004611966565b610a34565b610300610a80565b61026b610af4565b610300610392366004611966565b610b14565b61026b607081565b610300610b75565b61026b60065481565b6000546001600160a01b0316610294565b600554610294906001600160a01b031681565b61026b60075481565b6103006103eb366004611966565b610bc4565b6103006103fe3660046119e5565b610c10565b600154610294906001600160a01b031681565b61026b6103e881565b61029461042d3660046119e5565b610c75565b61026b610c9f565b610300610448366004611966565b610d20565b610300610d6c565b61026b60085481565b61030061046c366004611966565b610e88565b61029461047f3660046119e5565b610ed4565b61026b603281565b600a54610294906001600160a01b031681565b6103006104ad366004611966565b610ee4565b610300610f8f565b600454610294906001600160a01b031681565b600c54600d546040516393f1a40b60e01b815260009283926001600160a01b03909116916393f1a40b91610505913090600401611ec6565b604080518083038186803b15801561051c57600080fd5b505afa158015610530573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105549190611a1d565b5092915050565b6000546001600160a01b031633148061057e57506001546001600160a01b031633145b6105a35760405162461bcd60e51b815260040161059a90611e72565b60405180910390fd5b606f8111156105c45760405162461bcd60e51b815260040161059a90611e2a565b6007819055806105d760706103e8611fa6565b6105e19190611fa6565b60085550565b6004546001600160a01b031633146106115760405162461bcd60e51b815260040161059a90611e3c565b600b546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610642903090600401611d58565b60206040518083038186803b15801561065a57600080fd5b505afa15801561066e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106929190611a01565b90508181101561079057600c54600d546001600160a01b039091169063441a3e70906106be858561123c565b6040518363ffffffff1660e01b81526004016106db929190611ed2565b600060405180830381600087803b1580156106f557600080fd5b505af1158015610709573d6000803e3d6000fd5b5050600b546040516370a0823160e01b81526001600160a01b0390911692506370a08231915061073d903090600401611d58565b60206040518083038186803b15801561075557600080fd5b505afa158015610769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078d9190611a01565b90505b8181111561079b5750805b6000546001600160a01b03163214806107bd5750600054600160a01b900460ff165b156107e357600454600b546107df916001600160a01b03918216911683611251565b5050565b60006108066127106108006006548561127090919063ffffffff16565b9061127c565b600454909150610836906001600160a01b0316610823848461123c565b600b546001600160a01b03169190611251565b505050565b6000546001600160a01b031633148061085e57506001546001600160a01b031633145b61087a5760405162461bcd60e51b815260040161059a90611e72565b610882611288565b61088a6112f8565b610892610d6c565b565b600054600160a01b900460ff16156108be5760405162461bcd60e51b815260040161059a90611e18565b3332146108dd5760405162461bcd60e51b815260040161059a90611e96565b600c54600d54604051631c57762b60e31b81526001600160a01b039092169163e2bbb1589161091191600090600401611ed2565b600060405180830381600087803b15801561092b57600080fd5b505af115801561093f573d6000803e3d6000fd5b5050505061094b611336565b610953611588565b61095b610d6c565b60405133907f577a37fdb49a88d66684922c6f913df5239b4f214b2b97c53ef8e3bbb2034cb590600090a2565b6000546001600160a01b03163314806109ab57506001546001600160a01b031633145b6109c75760405162461bcd60e51b815260040161059a90611e72565b6109cf610b75565b600c54600d54604051632989754760e11b81526001600160a01b0390921691635312ea8e91610a0091600401611eba565b600060405180830381600087803b158015610a1a57600080fd5b505af1158015610a2e573d6000803e3d6000fd5b50505050565b6000546001600160a01b03163314610a5e5760405162461bcd60e51b815260040161059a90611e4e565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610aaa5760405162461bcd60e51b815260040161059a90611e4e565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000610b0f610b016104cd565b610b09610c9f565b9061169a565b905090565b6000546001600160a01b0316331480610b3757506001546001600160a01b031633145b610b535760405162461bcd60e51b815260040161059a90611e72565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331480610b9857506001546001600160a01b031633145b610bb45760405162461bcd60e51b815260040161059a90611e72565b610bbc6116a6565b61089261170b565b6000546001600160a01b03163314610bee5760405162461bcd60e51b815260040161059a90611e4e565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331480610c3357506001546001600160a01b031633145b610c4f5760405162461bcd60e51b815260040161059a90611e72565b6032811115610c705760405162461bcd60e51b815260040161059a90611e2a565b600655565b600e8181548110610c8557600080fd5b6000918252602090912001546001600160a01b0316905081565b600b546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610cd0903090600401611d58565b60206040518083038186803b158015610ce857600080fd5b505afa158015610cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0f9190611a01565b6002546001600160a01b03163314610d4a5760405162461bcd60e51b815260040161059a90611de2565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600054600160a01b900460ff1615610d965760405162461bcd60e51b815260040161059a90611e18565b600b546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610dc7903090600401611d58565b60206040518083038186803b158015610ddf57600080fd5b505afa158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e179190611a01565b90508015610e8557600c54600d54604051631c57762b60e31b81526001600160a01b039092169163e2bbb15891610e52918590600401611ed2565b600060405180830381600087803b158015610e6c57600080fd5b505af1158015610e80573d6000803e3d6000fd5b505050505b50565b6000546001600160a01b03163314610eb25760405162461bcd60e51b815260040161059a90611e4e565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600f8181548110610c8557600080fd5b6000546001600160a01b03163314610f0e5760405162461bcd60e51b815260040161059a90611e4e565b6001600160a01b038116610f345760405162461bcd60e51b815260040161059a90611df4565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610fb95760405162461bcd60e51b815260040161059a90611e3c565b600c54600d54604051632989754760e11b81526001600160a01b0390921691635312ea8e91610fea91600401611eba565b600060405180830381600087803b15801561100457600080fd5b505af1158015611018573d6000803e3d6000fd5b5050600b546040516370a0823160e01b8152600093506001600160a01b0390911691506370a082319061104f903090600401611d58565b60206040518083038186803b15801561106757600080fd5b505afa15801561107b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109f9190611a01565b600b546004805460405163a9059cbb60e01b81529394506001600160a01b039283169363a9059cbb936110d793921691869101611d92565b602060405180830381600087803b1580156110f157600080fd5b505af1158015611105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107df91906119c7565b8015806111b15750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061115f9030908690600401611d6d565b60206040518083038186803b15801561117757600080fd5b505afa15801561118b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111af9190611a01565b155b6111cd5760405162461bcd60e51b815260040161059a90611ea8565b6108368363095ea7b360e01b84846040516024016111ec929190611d92565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611747565b606061123284846000856117d6565b90505b9392505050565b60006112488284611fa6565b90505b92915050565b6108368363a9059cbb60e01b84846040516024016111ec929190611d92565b60006112488284611f87565b60006112488284611f73565b600054600160a01b900460ff166112b15760405162461bcd60e51b815260040161059a90611dd0565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516112ee9190611d58565b60405180910390a1565b600c54600b54611317916001600160a01b039182169116600019611129565b600354600a54610892916001600160a01b039182169116600019611129565b600a546040516370a0823160e01b81526000916113cc916103e89161080091602d916001600160a01b0316906370a0823190611376903090600401611d58565b60206040518083038186803b15801561138e57600080fd5b505afa1580156113a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c69190611a01565b90611270565b6003546040516338ed173960e01b81529192506001600160a01b0316906338ed173990611407908490600090600e9030904290600401611ede565b600060405180830381600087803b15801561142157600080fd5b505af1158015611435573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261145d9190810190611984565b506009546040516370a0823160e01b81526000916001600160a01b0316906370a082319061148f903090600401611d58565b60206040518083038186803b1580156114a757600080fd5b505afa1580156114bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114df9190611a01565b905060006114fe6103e86108006007548561127090919063ffffffff16565b600954909150611518906001600160a01b03163383611251565b60006115356103e86108006008548661127090919063ffffffff16565b600554600954919250611555916001600160a01b03908116911683611251565b60006115686103e8610800866070611270565b600254600954919250610e80916001600160a01b03908116911683611251565b600a546040516370a0823160e01b81526000916001600160a01b0316906370a08231906115b9903090600401611d58565b60206040518083038186803b1580156115d157600080fd5b505afa1580156115e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116099190611a01565b6003546040516338ed173960e01b81529192506001600160a01b0316906338ed173990611644908490600090600f9030904290600401611ede565b600060405180830381600087803b15801561165e57600080fd5b505af1158015611672573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107df9190810190611984565b60006112488284611f5b565b600054600160a01b900460ff16156116d05760405162461bcd60e51b815260040161059a90611e18565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112e13390565b600c54600b54611729916001600160a01b0391821691166000611129565b600354600a54610892916001600160a01b0391821691166000611129565b600061179c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112239092919063ffffffff16565b80519091501561083657808060200190518101906117ba91906119c7565b6108365760405162461bcd60e51b815260040161059a90611e84565b6060824710156117f85760405162461bcd60e51b815260040161059a90611e06565b843b6118165760405162461bcd60e51b815260040161059a90611e60565b600080866001600160a01b031685876040516118329190611d4c565b60006040518083038185875af1925050503d806000811461186f576040519150601f19603f3d011682016040523d82523d6000602084013e611874565b606091505b509150915061188482828661188f565b979650505050505050565b6060831561189e575081611235565b8251156118ae5782518084602001fd5b8160405162461bcd60e51b815260040161059a9190611dbd565b60006118db6118d684611f37565b611f2a565b9050808382526020808301915083868660051b860111156118fe576118fe600080fd5b60005b8681101561191d57815184529282019290820190600101611901565b505050509392505050565b803561193381612058565b919050565b600082601f83011261194c5761194c600080fd5b611248838351602085016118c8565b80516119338161206d565b60006020828403121561197b5761197b600080fd5b61124882611928565b60006020828403121561199957611999600080fd5b815167ffffffffffffffff8111156119b3576119b3600080fd5b6119bf84828501611938565b949350505050565b6000602082840312156119dc576119dc600080fd5b6112488261195b565b6000602082840312156119fa576119fa600080fd5b5035919050565b600060208284031215611a1657611a16600080fd5b5051919050565b60008060408385031215611a3357611a33600080fd5b505080516020909101519092909150565b805480835260008281526020808220940193909190825b82811015611a9757611a8986611a7884546001600160a01b031690565b6001600160a01b0316815260200190565b955060019182019101611a5b565b5093949350505050565b60008151611ab3818560208601611fbd565b9290920192915050565b805180835260009060208401611ad7828260208701611fbd565b601f91909101601f1916019392505050565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b81525b60200192915050565b600b81526000602082016a085cdd1c985d1959da5cdd60aa1b8152611b0e565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201525b60400192915050565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b6020820152611b74565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b8152611b0e565b60048152600060208201630216361760e41b8152611b0e565b6006815260006020820165085d985d5b1d60d21b8152611b0e565b6000611c268260208082520190565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728152611b0e565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000008152611b0e565b600881526000602082016710b6b0b730b3b2b960c11b8152611b0e565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b6020820152611b74565b600481526000602082016321454f4160e01b8152611b0e565b603681526000602082017f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6020820152611b74565b60006112488284611aa1565b6001600160a01b03821681526020810161124b565b6001600160a01b0383168152604081015b6001600160a01b0383166020830152611235565b6001600160a01b0383168152604081015b61123560208301849052565b81151581526020810161124b565b6020815260006112486020830184611abd565b60208152600061124b60208301611ae9565b60208152600061124b60208301611b17565b60208152600061124b60208301611b37565b60208152600061124b60208301611b7d565b60208152600061124b60208301611bbe565b60208152600061124b60208301611be3565b60208152600061124b60208301611bfc565b60208152600061124b60208301611c17565b60208152600061124b60208301611c4e565b60208152600061124b60208301611c80565b60208152600061124b60208301611c9d565b60208152600061124b60208301611ce2565b60208152600061124b60208301611cfb565b8181526020810161124b565b82815260408101611d7e565b82815260408101611da3565b858152611eed60208201869052565b60a060408201526000611f0360a0830186611a44565b6001600160a01b03851660608401529050611f2060808301849052565b9695505050505050565b6040516119338282611fe9565b600067ffffffffffffffff821115611f5157611f51612042565b5060051b60200190565b60008219821115611f6e57611f6e612016565b500190565b600082611f8257611f8261202c565b500490565b6000816000190483118215151615611fa157611fa1612016565b500290565b600082821015611fb857611fb8612016565b500390565b60005b83811015611fd8578181015183820152602001611fc0565b83811115610a2e5750506000910152565b601f8201601f1916810167ffffffffffffffff8111828210171561200f5761200f612042565b6040525050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e8557600080fd5b8015158114610e8557600080fdfea2646970667358221220111cf9e59ff05b3ce9d830c2c75b80b60194973b782cad3edaad361490782ff464736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "beforeDeposit()": {
        "details": "Function to synchronize balances before new user deposit. Can be overridden in the strategy."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBeefyFeeRecipient(address)": {
        "details": "Updates beefy fee recipient.",
        "params": {
          "_beefyFeeRecipient": "new beefy fee recipient address."
        }
      },
      "setKeeper(address)": {
        "details": "Updates address of the strat keeper.",
        "params": {
          "_keeper": "new keeper address."
        }
      },
      "setStrategist(address)": {
        "details": "Updates address where strategist fee earnings will go.",
        "params": {
          "_strategist": "new strategist address."
        }
      },
      "setUnirouter(address)": {
        "details": "Updates router that will be used for swaps.",
        "params": {
          "_unirouter": "new unirouter address."
        }
      },
      "setVault(address)": {
        "details": "Updates parent vault.",
        "params": {
          "_vault": "new vault address."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 375,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1263,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 38436,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "keeper",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 38438,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "strategist",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 38440,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "unirouter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 38442,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "vault",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 38444,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "beefyFeeRecipient",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 38368,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "withdrawalFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 38371,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "callFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 38378,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "beefyFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 38610,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "native",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 38612,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "output",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 38614,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "want",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 38616,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "chef",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 38618,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "poolId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 38621,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "outputToNativeRoute",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 39469,
        "contract": "contracts/BIFI/strategies/Common/StrategyCommonChefSingle.sol:StrategyCommonChefSingle",
        "label": "outputToWantRoute",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}